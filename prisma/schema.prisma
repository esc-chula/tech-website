generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  oidcId    String? @unique
  studentId String  @unique

  UserAdminApp UserServiceRole[] @relation("UserToServiceRole")

  userShortenedLinks        UserShortenedLink[]    @relation("UserToShortenedLink")
  userQrCodes               UserQrCode[]           @relation("UserToQrCodeGen")
  userHackathonTeamTicket   HackathonTeamTicket?   @relation("UserToHackathonTeamTicket")
  userHackathonTicketClaims HackathonTicketClaim[] @relation("UserToHackathonTicketClaims")
}

model UserServiceRole {
  id     Int    @id @default(autoincrement())
  userId Int
  appId  String
  role   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "UserToServiceRole")

  @@unique([userId, appId])
}

model UserShortenedLink {
  id    Int    @id @default(autoincrement())
  name  String
  url   String
  slug  String @unique
  count Int    @default(0)

  userId                          Int
  user                            User                             @relation(fields: [userId], references: [id], name: "UserToShortenedLink")
  userShortenedLinkVisitedRecords UserShortenedLinkVisitedRecord[] @relation("UserShortenedLinkVisitedRecords")

  editedAt DateTime @default(now())
}

model UserShortenedLinkVisitedRecord {
  id                 Int     @id @default(autoincrement())
  utmCampaignId      String?
  utmCampaignSource  String?
  utmCampaignMedium  String?
  utmCampaignName    String?
  utmCampaignTerm    String?
  utmCampaignContent String?

  userShortenedLinkId Int
  userShortenedLink   UserShortenedLink @relation(fields: [userShortenedLinkId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "UserShortenedLinkVisitedRecords")

  editedAt DateTime @default(now())
}

model UserQrCode {
  id     Int     @id @default(autoincrement())
  name   String
  url    String
  qrCode String
  color  String
  logo   String?

  userId Int
  user   User @relation(fields: [userId], references: [id], name: "UserToQrCodeGen")

  editedAt DateTime @default(now())
}

model TechMonthStamp {
  id        Int    @id @default(autoincrement())
  studentId String
  eventId   String
}

model HackathonTicket {
  id         Int                 @id @default(autoincrement())
  code       String              @unique
  codeId     String?
  ticketType HackathonTicketType

  claims       HackathonTicketClaim[] @relation("HackathonTicketToTicketClaims")
  teamTicketId Int?
  teamTicket   HackathonTeamTicket?   @relation(fields: [teamTicketId], references: [id], name: "HackathonTeamTicketToTickets")
}

model HackathonTicketClaim {
  id        Int       @id @default(autoincrement())
  ticketId  Int
  userId    Int
  claimedAt DateTime  @default(now())
  expiredAt DateTime?

  ticket HackathonTicket @relation(fields: [ticketId], references: [id], name: "HackathonTicketToTicketClaims")
  user   User            @relation(fields: [userId], references: [id], name: "UserToHackathonTicketClaims")

  @@unique([ticketId, userId])
}

enum HackathonTicketType {
  DESIGNER
  DEVELOPER
  PRODUCT
  GENERAL
}

model HackathonTeamTicket {
  id           Int                    @id @default(autoincrement())
  publicId     String                 @unique
  userId       Int                    @unique
  user         User                   @relation("UserToHackathonTeamTicket", fields: [userId], references: [id])
  tickets      HackathonTicket[]      @relation("HackathonTeamTicketToTickets")
  registration HackathonRegistration? @relation("HackathonTeamTicketToRegistration")
}

model HackathonCommunityRegistration {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  expiresAt          DateTime?
  isActive           Boolean   @default(true)
  requiredUniversity String

  communityTeam      HackathonCommunityTeam?       @relation("HackathonCommunityRegistrationToTeam")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HackathonRegistration {
  id                      Int  @id @default(autoincrement())
  teamTicketId            Int  @unique

  teamTicket            HackathonTeamTicket             @relation(fields: [teamTicketId], references: [id], name: "HackathonTeamTicketToRegistration")
  teamName              String
  teamMembers           HackathonTeamMember[]           @relation("HackathonRegistrationToTeamMembers")
}

model HackathonCommunityTeam {
  id                      Int      @id @default(autoincrement())
  publicId                String   @unique
  communityRegistrationId Int      @unique
  communityRegistration   HackathonCommunityRegistration @relation(fields: [communityRegistrationId], references: [id], name: "HackathonCommunityRegistrationToTeam")
  
  teamName    String
  teamMembers HackathonCommunityTeamMember[] @relation("HackathonCommunityTeamToMembers")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HackathonCommunityTeamMember {
  id             Int                   @id @default(autoincrement())
  publicId       String                @unique
  teamId         Int
  team           HackathonCommunityTeam @relation(fields: [teamId], references: [id], name: "HackathonCommunityTeamToMembers")

  firstName   String
  lastName    String
  nickname    String
  pronoun     HackathonPronoun
  phoneNumber String
  email       String
  studentId   String
  faculty     String
  department  String
  university  String
  role        HackathonRole

  foodRestriction  String?
  medication       String?
  medicalCondition String?
  chestSize        Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HackathonTeamMember {
  id             Int                   @id @default(autoincrement())
  publicId       String                @unique
  registrationId Int
  registration   HackathonRegistration @relation(fields: [registrationId], references: [id], name: "HackathonRegistrationToTeamMembers")

  firstName   String
  lastName    String
  nickname    String
  pronoun     HackathonPronoun
  phoneNumber String
  email       String
  studentId   String
  faculty     String
  department  String
  university  String
  role        HackathonRole

  foodRestriction  String?
  medication       String?
  medicalCondition String?

  chestSize Int @default(0)
}

enum HackathonPronoun {
  HE
  SHE
  THEY
  OTHER
}

enum HackathonRole {
  DEVELOPER
  DESIGNER
  PRODUCT
}
