generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int    @id @default(autoincrement())
    oidcId    String @unique
    studentId String @unique

    UserAdminApp UserServiceRole[] @relation("UserToServiceRole")

    userShortenedLinks UserShortenedLink[] @relation("UserToShortenedLink")
    userQrCodes        UserQrCode[]        @relation("UserToQrCodeGen")
    userHackathonGroupTicket HackathonGroupTicket? @relation("UserToHackathonGroupTicket")
}

model UserServiceRole {
    id     Int    @id @default(autoincrement())
    userId Int
    appId  String
    role   String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "UserToServiceRole")

    @@unique([userId, appId])
}

model UserShortenedLink {
    id    Int    @id @default(autoincrement())
    name  String
    url   String
    slug  String @unique
    count Int    @default(0)

    userId                          Int
    user                            User                             @relation(fields: [userId], references: [id], name: "UserToShortenedLink")
    userShortenedLinkVisitedRecords UserShortenedLinkVisitedRecord[] @relation("UserShortenedLinkVisitedRecords")

    editedAt DateTime @default(now())
}

model UserShortenedLinkVisitedRecord {
    id                 Int     @id @default(autoincrement())
    utmCampaignId      String?
    utmCampaignSource  String?
    utmCampaignMedium  String?
    utmCampaignName    String?
    utmCampaignTerm    String?
    utmCampaignContent String?

    userShortenedLinkId Int
    userShortenedLink   UserShortenedLink @relation(fields: [userShortenedLinkId], references: [id], onUpdate: Cascade, onDelete: Cascade, name: "UserShortenedLinkVisitedRecords")

    editedAt DateTime @default(now())
}

model UserQrCode {
    id     Int     @id @default(autoincrement())
    name   String
    url    String
    qrCode String
    color  String
    logo   String?

    userId Int
    user   User @relation(fields: [userId], references: [id], name: "UserToQrCodeGen")

    editedAt DateTime @default(now())
}

model TechMonthStamp {
    id        Int    @id @default(autoincrement())
    studentId String
    eventId   String
}

model HackathonTicket {
    id            Int      @id @default(autoincrement())
    code          String   @unique
    ticketType    HackathonTicketType
    isClaimed     Boolean  @default(false)
    claimedAt     DateTime?
    isRegistered  Boolean  @default(false)

    groupTicketId Int?
    groupTicket   HackathonGroupTicket? @relation(fields: [groupTicketId], references: [id])
}

enum HackathonTicketType {
    DESIGNER
    DEVELOPER
    PRODUCT
    GENERAL
}

model HackathonGroupTicket {
    id            Int      @id @default(autoincrement())
    
    userId        Int @unique
    user      User     @relation("UserToHackathonGroupTicket", fields: [userId], references: [id])
    tickets       HackathonTicket[]
    registration  HackathonRegistration?
}

model HackathonRegistration {
    id                Int      @id @default(autoincrement())
    groupTicketId     Int      @unique 
    
    groupTicket      HackathonGroupTicket @relation(fields: [groupTicketId], references: [id])
    teamMembers      HackathonTeamMember[]
}

model HackathonTeamMember {
    id               Int      @id @default(autoincrement())
    registrationId   Int
    registration     HackathonRegistration @relation(fields: [registrationId], references: [id])
    
    firstName        String
    lastName         String
    nickName         String
    pronoun          String
    phoneNumber      String
    email           String
    studentId       String
    faculty         String
    department      String
    university      String
    role            HackathonRole
    
    foodRestriction  String?  
    medication       String?  
    medicalCondition String?  
}

enum HackathonRole {
    DEVELOPER
    DESIGNER
    PRODUCT
}

