// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.27.4
// source: intania/auth/student/v1/student.proto

/* eslint-disable -- Code generated by protoc-gen-ts_proto. DO NOT EDIT. */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { FieldMask } from '../../../../google/protobuf/field_mask';
import { Timestamp } from '../../../../google/protobuf/timestamp';

export const protobufPackage = 'intania.auth.student.v1';

export interface GetStudentByIdRequest {
  id: string;
  masks: string[] | undefined;
  sid: string;
}

export interface GetStudentByIdResponse {
  student: Student | undefined;
}

export interface GetStudentByStudentIdRequest {
  studentId: string;
  masks: string[] | undefined;
  sid: string;
}

export interface GetStudentByStudentIdResponse {
  student: Student | undefined;
}

export interface EditStudentRequest {
  student: Student | undefined;
  masks: string[] | undefined;
  sid: string;
}

export interface EditStudentResponse {}

export interface ListStudentMappingRequest {
  /**
   * If not specified, default to all field.
   * Currently masks only support first-level, i.e., "departments" works but "departments.name_th" does not work.
   */
  masks: string[] | undefined;
  /**
   * Revalidate information cache of the given masks. The default duration of the cache
   * is up to the server to decide.
   * Default value to false.
   */
  revalidateCache?: boolean | undefined;
}

export interface ListStudentMappingResponse {
  departments: Department[];
  religions: Religion[];
  familyStatuses: FamilyStatus[];
  familyMemberStatuses: FamilyMemberStatus[];
  countries: Country[];
  provinces: Province[];
  districts: District[];
}

export interface Student {
  /** Internal data */
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  profilePictureKey?: string | undefined;
  /** Student related data */
  studentId?: string | undefined;
  department?: Department | undefined;
  /** Personal data 1 */
  titleTh?: string | undefined;
  titleEn?: string | undefined;
  firstNameTh?: string | undefined;
  firstNameEn?: string | undefined;
  familyNameTh?: string | undefined;
  familyNameEn?: string | undefined;
  middleNameTh?: string | undefined;
  middleNameEn?: string | undefined;
  nicknameTh?: string | undefined;
  nicknameEn?: string | undefined;
  preferredPronoun?: string | undefined;
  nationalId?: string | undefined;
  /** Personal data 2 */
  nationality?: Country | undefined;
  birthDate?: Date | undefined;
  religion?: Religion | undefined;
  bloodType?: string | undefined;
  foodLimitations?: string | undefined;
  drugAllergies?: string | undefined;
  medicalConditions?: string | undefined;
  medications?: string | undefined;
  shirtSize?: number | undefined;
  /** Social */
  email?: string | undefined;
  emailVerified?: boolean | undefined;
  phoneNumber?: string | undefined;
  phoneNumberVerified?: boolean | undefined;
  lineId?: string | undefined;
  facebook?: string | undefined;
  instagram?: string | undefined;
  /** Family */
  familyStatus?: FamilyStatus | undefined;
  /** string enum: "Father", "Mother", "Other" */
  parent?: string | undefined;
  siblingTotal?: number | undefined;
  siblingOrder?: number | undefined;
  parentPhoneNumber?: string | undefined;
  parentAddress?: string | undefined;
  /** Father & Mother */
  fatherName?: string | undefined;
  fatherBirthYear?: number | undefined;
  fatherStatus?: FamilyMemberStatus | undefined;
  motherName?: string | undefined;
  motherBirthYear?: number | undefined;
  motherStatus?: FamilyMemberStatus | undefined;
  /** Current address */
  currentAddressNumber?: string | undefined;
  currentAddressProvince?: Province | undefined;
  currentAddressDistrict?: District | undefined;
  currentAddressLatitude?: number | undefined;
  currentAddressLongitude?: number | undefined;
  currentAddressOther?: string | undefined;
  /** Hometown address */
  hometownAddressNumber?: string | undefined;
  hometownAddressProvince?: Province | undefined;
  hometownAddressDistrict?: District | undefined;
  hometownAddressLatitude?: number | undefined;
  hometownAddressLongitude?: number | undefined;
  hometownAddressOther?: string | undefined;
  /** Miscellaneous */
  cueaDataTransferAgreement?: boolean | undefined;
}

export interface Department {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  nameTh?: string | undefined;
  nameEn?: string | undefined;
  code?: string | undefined;
}

export interface Country {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  name?: string | undefined;
  code?: string | undefined;
}

export interface Religion {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  nameTh?: string | undefined;
  nameEn?: string | undefined;
}

export interface FamilyStatus {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  valueTh?: string | undefined;
  valueEn?: string | undefined;
}

export interface FamilyMemberStatus {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  valueTh?: string | undefined;
  valueEn?: string | undefined;
}

export interface Province {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  nameTh?: string | undefined;
  nameEn?: string | undefined;
  provinceCode?: number | undefined;
}

export interface District {
  id: number;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  nameTh?: string | undefined;
  nameEn?: string | undefined;
  provinceCode?: number | undefined;
  districtCode?: number | undefined;
  postalCode?: number | undefined;
}

function createBaseGetStudentByIdRequest(): GetStudentByIdRequest {
  return { id: '', masks: undefined, sid: '' };
}

export const GetStudentByIdRequest: MessageFns<GetStudentByIdRequest> = {
  encode(
    message: GetStudentByIdRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.masks !== undefined) {
      FieldMask.encode(
        FieldMask.wrap(message.masks),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.sid !== '') {
      writer.uint32(26).string(message.sid);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetStudentByIdRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.masks = FieldMask.unwrap(
            FieldMask.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      masks: isSet(object.masks)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.masks))
        : undefined,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : '',
    };
  },

  toJSON(message: GetStudentByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.masks !== undefined) {
      obj.masks = FieldMask.toJSON(FieldMask.wrap(message.masks));
    }
    if (message.sid !== '') {
      obj.sid = message.sid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentByIdRequest>, I>>(
    base?: I,
  ): GetStudentByIdRequest {
    return GetStudentByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentByIdRequest>, I>>(
    object: I,
  ): GetStudentByIdRequest {
    const message = createBaseGetStudentByIdRequest();
    message.id = object.id ?? '';
    message.masks = object.masks ?? undefined;
    message.sid = object.sid ?? '';
    return message;
  },
};

function createBaseGetStudentByIdResponse(): GetStudentByIdResponse {
  return { student: undefined };
}

export const GetStudentByIdResponse: MessageFns<GetStudentByIdResponse> = {
  encode(
    message: GetStudentByIdResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.student !== undefined) {
      Student.encode(message.student, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetStudentByIdResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudentByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.student = Student.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudentByIdResponse {
    return {
      student: isSet(object.student)
        ? Student.fromJSON(object.student)
        : undefined,
    };
  },

  toJSON(message: GetStudentByIdResponse): unknown {
    const obj: any = {};
    if (message.student !== undefined) {
      obj.student = Student.toJSON(message.student);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStudentByIdResponse>, I>>(
    base?: I,
  ): GetStudentByIdResponse {
    return GetStudentByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStudentByIdResponse>, I>>(
    object: I,
  ): GetStudentByIdResponse {
    const message = createBaseGetStudentByIdResponse();
    message.student =
      object.student !== undefined && object.student !== null
        ? Student.fromPartial(object.student)
        : undefined;
    return message;
  },
};

function createBaseGetStudentByStudentIdRequest(): GetStudentByStudentIdRequest {
  return { studentId: '', masks: undefined, sid: '' };
}

export const GetStudentByStudentIdRequest: MessageFns<GetStudentByStudentIdRequest> =
  {
    encode(
      message: GetStudentByStudentIdRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.studentId !== '') {
        writer.uint32(10).string(message.studentId);
      }
      if (message.masks !== undefined) {
        FieldMask.encode(
          FieldMask.wrap(message.masks),
          writer.uint32(18).fork(),
        ).join();
      }
      if (message.sid !== '') {
        writer.uint32(26).string(message.sid);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetStudentByStudentIdRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetStudentByStudentIdRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.studentId = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.masks = FieldMask.unwrap(
              FieldMask.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.sid = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): GetStudentByStudentIdRequest {
      return {
        studentId: isSet(object.studentId)
          ? globalThis.String(object.studentId)
          : '',
        masks: isSet(object.masks)
          ? FieldMask.unwrap(FieldMask.fromJSON(object.masks))
          : undefined,
        sid: isSet(object.sid) ? globalThis.String(object.sid) : '',
      };
    },

    toJSON(message: GetStudentByStudentIdRequest): unknown {
      const obj: any = {};
      if (message.studentId !== '') {
        obj.studentId = message.studentId;
      }
      if (message.masks !== undefined) {
        obj.masks = FieldMask.toJSON(FieldMask.wrap(message.masks));
      }
      if (message.sid !== '') {
        obj.sid = message.sid;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<GetStudentByStudentIdRequest>, I>>(
      base?: I,
    ): GetStudentByStudentIdRequest {
      return GetStudentByStudentIdRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<GetStudentByStudentIdRequest>, I>>(
      object: I,
    ): GetStudentByStudentIdRequest {
      const message = createBaseGetStudentByStudentIdRequest();
      message.studentId = object.studentId ?? '';
      message.masks = object.masks ?? undefined;
      message.sid = object.sid ?? '';
      return message;
    },
  };

function createBaseGetStudentByStudentIdResponse(): GetStudentByStudentIdResponse {
  return { student: undefined };
}

export const GetStudentByStudentIdResponse: MessageFns<GetStudentByStudentIdResponse> =
  {
    encode(
      message: GetStudentByStudentIdResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.student !== undefined) {
        Student.encode(message.student, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetStudentByStudentIdResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetStudentByStudentIdResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.student = Student.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): GetStudentByStudentIdResponse {
      return {
        student: isSet(object.student)
          ? Student.fromJSON(object.student)
          : undefined,
      };
    },

    toJSON(message: GetStudentByStudentIdResponse): unknown {
      const obj: any = {};
      if (message.student !== undefined) {
        obj.student = Student.toJSON(message.student);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<GetStudentByStudentIdResponse>, I>>(
      base?: I,
    ): GetStudentByStudentIdResponse {
      return GetStudentByStudentIdResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<GetStudentByStudentIdResponse>, I>>(
      object: I,
    ): GetStudentByStudentIdResponse {
      const message = createBaseGetStudentByStudentIdResponse();
      message.student =
        object.student !== undefined && object.student !== null
          ? Student.fromPartial(object.student)
          : undefined;
      return message;
    },
  };

function createBaseEditStudentRequest(): EditStudentRequest {
  return { student: undefined, masks: undefined, sid: '' };
}

export const EditStudentRequest: MessageFns<EditStudentRequest> = {
  encode(
    message: EditStudentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.student !== undefined) {
      Student.encode(message.student, writer.uint32(10).fork()).join();
    }
    if (message.masks !== undefined) {
      FieldMask.encode(
        FieldMask.wrap(message.masks),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.sid !== '') {
      writer.uint32(26).string(message.sid);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EditStudentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditStudentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.student = Student.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.masks = FieldMask.unwrap(
            FieldMask.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditStudentRequest {
    return {
      student: isSet(object.student)
        ? Student.fromJSON(object.student)
        : undefined,
      masks: isSet(object.masks)
        ? FieldMask.unwrap(FieldMask.fromJSON(object.masks))
        : undefined,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : '',
    };
  },

  toJSON(message: EditStudentRequest): unknown {
    const obj: any = {};
    if (message.student !== undefined) {
      obj.student = Student.toJSON(message.student);
    }
    if (message.masks !== undefined) {
      obj.masks = FieldMask.toJSON(FieldMask.wrap(message.masks));
    }
    if (message.sid !== '') {
      obj.sid = message.sid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditStudentRequest>, I>>(
    base?: I,
  ): EditStudentRequest {
    return EditStudentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditStudentRequest>, I>>(
    object: I,
  ): EditStudentRequest {
    const message = createBaseEditStudentRequest();
    message.student =
      object.student !== undefined && object.student !== null
        ? Student.fromPartial(object.student)
        : undefined;
    message.masks = object.masks ?? undefined;
    message.sid = object.sid ?? '';
    return message;
  },
};

function createBaseEditStudentResponse(): EditStudentResponse {
  return {};
}

export const EditStudentResponse: MessageFns<EditStudentResponse> = {
  encode(
    _: EditStudentResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EditStudentResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditStudentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EditStudentResponse {
    return {};
  },

  toJSON(_: EditStudentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EditStudentResponse>, I>>(
    base?: I,
  ): EditStudentResponse {
    return EditStudentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditStudentResponse>, I>>(
    _: I,
  ): EditStudentResponse {
    const message = createBaseEditStudentResponse();
    return message;
  },
};

function createBaseListStudentMappingRequest(): ListStudentMappingRequest {
  return { masks: undefined, revalidateCache: undefined };
}

export const ListStudentMappingRequest: MessageFns<ListStudentMappingRequest> =
  {
    encode(
      message: ListStudentMappingRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.masks !== undefined) {
        FieldMask.encode(
          FieldMask.wrap(message.masks),
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.revalidateCache !== undefined) {
        writer.uint32(16).bool(message.revalidateCache);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ListStudentMappingRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseListStudentMappingRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.masks = FieldMask.unwrap(
              FieldMask.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.revalidateCache = reader.bool();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ListStudentMappingRequest {
      return {
        masks: isSet(object.masks)
          ? FieldMask.unwrap(FieldMask.fromJSON(object.masks))
          : undefined,
        revalidateCache: isSet(object.revalidateCache)
          ? globalThis.Boolean(object.revalidateCache)
          : undefined,
      };
    },

    toJSON(message: ListStudentMappingRequest): unknown {
      const obj: any = {};
      if (message.masks !== undefined) {
        obj.masks = FieldMask.toJSON(FieldMask.wrap(message.masks));
      }
      if (message.revalidateCache !== undefined) {
        obj.revalidateCache = message.revalidateCache;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<ListStudentMappingRequest>, I>>(
      base?: I,
    ): ListStudentMappingRequest {
      return ListStudentMappingRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<ListStudentMappingRequest>, I>>(
      object: I,
    ): ListStudentMappingRequest {
      const message = createBaseListStudentMappingRequest();
      message.masks = object.masks ?? undefined;
      message.revalidateCache = object.revalidateCache ?? undefined;
      return message;
    },
  };

function createBaseListStudentMappingResponse(): ListStudentMappingResponse {
  return {
    departments: [],
    religions: [],
    familyStatuses: [],
    familyMemberStatuses: [],
    countries: [],
    provinces: [],
    districts: [],
  };
}

export const ListStudentMappingResponse: MessageFns<ListStudentMappingResponse> =
  {
    encode(
      message: ListStudentMappingResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.departments) {
        Department.encode(v!, writer.uint32(10).fork()).join();
      }
      for (const v of message.religions) {
        Religion.encode(v!, writer.uint32(18).fork()).join();
      }
      for (const v of message.familyStatuses) {
        FamilyStatus.encode(v!, writer.uint32(26).fork()).join();
      }
      for (const v of message.familyMemberStatuses) {
        FamilyMemberStatus.encode(v!, writer.uint32(34).fork()).join();
      }
      for (const v of message.countries) {
        Country.encode(v!, writer.uint32(42).fork()).join();
      }
      for (const v of message.provinces) {
        Province.encode(v!, writer.uint32(50).fork()).join();
      }
      for (const v of message.districts) {
        District.encode(v!, writer.uint32(58).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ListStudentMappingResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseListStudentMappingResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.departments.push(
              Department.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.religions.push(Religion.decode(reader, reader.uint32()));
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.familyStatuses.push(
              FamilyStatus.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 4: {
            if (tag !== 34) {
              break;
            }

            message.familyMemberStatuses.push(
              FamilyMemberStatus.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 5: {
            if (tag !== 42) {
              break;
            }

            message.countries.push(Country.decode(reader, reader.uint32()));
            continue;
          }
          case 6: {
            if (tag !== 50) {
              break;
            }

            message.provinces.push(Province.decode(reader, reader.uint32()));
            continue;
          }
          case 7: {
            if (tag !== 58) {
              break;
            }

            message.districts.push(District.decode(reader, reader.uint32()));
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ListStudentMappingResponse {
      return {
        departments: globalThis.Array.isArray(object?.departments)
          ? object.departments.map((e: any) => Department.fromJSON(e))
          : [],
        religions: globalThis.Array.isArray(object?.religions)
          ? object.religions.map((e: any) => Religion.fromJSON(e))
          : [],
        familyStatuses: globalThis.Array.isArray(object?.familyStatuses)
          ? object.familyStatuses.map((e: any) => FamilyStatus.fromJSON(e))
          : [],
        familyMemberStatuses: globalThis.Array.isArray(
          object?.familyMemberStatuses,
        )
          ? object.familyMemberStatuses.map((e: any) =>
              FamilyMemberStatus.fromJSON(e),
            )
          : [],
        countries: globalThis.Array.isArray(object?.countries)
          ? object.countries.map((e: any) => Country.fromJSON(e))
          : [],
        provinces: globalThis.Array.isArray(object?.provinces)
          ? object.provinces.map((e: any) => Province.fromJSON(e))
          : [],
        districts: globalThis.Array.isArray(object?.districts)
          ? object.districts.map((e: any) => District.fromJSON(e))
          : [],
      };
    },

    toJSON(message: ListStudentMappingResponse): unknown {
      const obj: any = {};
      if (message.departments?.length) {
        obj.departments = message.departments.map((e) => Department.toJSON(e));
      }
      if (message.religions?.length) {
        obj.religions = message.religions.map((e) => Religion.toJSON(e));
      }
      if (message.familyStatuses?.length) {
        obj.familyStatuses = message.familyStatuses.map((e) =>
          FamilyStatus.toJSON(e),
        );
      }
      if (message.familyMemberStatuses?.length) {
        obj.familyMemberStatuses = message.familyMemberStatuses.map((e) =>
          FamilyMemberStatus.toJSON(e),
        );
      }
      if (message.countries?.length) {
        obj.countries = message.countries.map((e) => Country.toJSON(e));
      }
      if (message.provinces?.length) {
        obj.provinces = message.provinces.map((e) => Province.toJSON(e));
      }
      if (message.districts?.length) {
        obj.districts = message.districts.map((e) => District.toJSON(e));
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<ListStudentMappingResponse>, I>>(
      base?: I,
    ): ListStudentMappingResponse {
      return ListStudentMappingResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<ListStudentMappingResponse>, I>>(
      object: I,
    ): ListStudentMappingResponse {
      const message = createBaseListStudentMappingResponse();
      message.departments =
        object.departments?.map((e) => Department.fromPartial(e)) || [];
      message.religions =
        object.religions?.map((e) => Religion.fromPartial(e)) || [];
      message.familyStatuses =
        object.familyStatuses?.map((e) => FamilyStatus.fromPartial(e)) || [];
      message.familyMemberStatuses =
        object.familyMemberStatuses?.map((e) =>
          FamilyMemberStatus.fromPartial(e),
        ) || [];
      message.countries =
        object.countries?.map((e) => Country.fromPartial(e)) || [];
      message.provinces =
        object.provinces?.map((e) => Province.fromPartial(e)) || [];
      message.districts =
        object.districts?.map((e) => District.fromPartial(e)) || [];
      return message;
    },
  };

function createBaseStudent(): Student {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    profilePictureKey: undefined,
    studentId: undefined,
    department: undefined,
    titleTh: undefined,
    titleEn: undefined,
    firstNameTh: undefined,
    firstNameEn: undefined,
    familyNameTh: undefined,
    familyNameEn: undefined,
    middleNameTh: undefined,
    middleNameEn: undefined,
    nicknameTh: undefined,
    nicknameEn: undefined,
    preferredPronoun: undefined,
    nationalId: undefined,
    nationality: undefined,
    birthDate: undefined,
    religion: undefined,
    bloodType: undefined,
    foodLimitations: undefined,
    drugAllergies: undefined,
    medicalConditions: undefined,
    medications: undefined,
    shirtSize: undefined,
    email: undefined,
    emailVerified: undefined,
    phoneNumber: undefined,
    phoneNumberVerified: undefined,
    lineId: undefined,
    facebook: undefined,
    instagram: undefined,
    familyStatus: undefined,
    parent: undefined,
    siblingTotal: undefined,
    siblingOrder: undefined,
    parentPhoneNumber: undefined,
    parentAddress: undefined,
    fatherName: undefined,
    fatherBirthYear: undefined,
    fatherStatus: undefined,
    motherName: undefined,
    motherBirthYear: undefined,
    motherStatus: undefined,
    currentAddressNumber: undefined,
    currentAddressProvince: undefined,
    currentAddressDistrict: undefined,
    currentAddressLatitude: undefined,
    currentAddressLongitude: undefined,
    currentAddressOther: undefined,
    hometownAddressNumber: undefined,
    hometownAddressProvince: undefined,
    hometownAddressDistrict: undefined,
    hometownAddressLatitude: undefined,
    hometownAddressLongitude: undefined,
    hometownAddressOther: undefined,
    cueaDataTransferAgreement: undefined,
  };
}

export const Student: MessageFns<Student> = {
  encode(
    message: Student,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.profilePictureKey !== undefined) {
      writer.uint32(34).string(message.profilePictureKey);
    }
    if (message.studentId !== undefined) {
      writer.uint32(42).string(message.studentId);
    }
    if (message.department !== undefined) {
      Department.encode(message.department, writer.uint32(50).fork()).join();
    }
    if (message.titleTh !== undefined) {
      writer.uint32(58).string(message.titleTh);
    }
    if (message.titleEn !== undefined) {
      writer.uint32(66).string(message.titleEn);
    }
    if (message.firstNameTh !== undefined) {
      writer.uint32(74).string(message.firstNameTh);
    }
    if (message.firstNameEn !== undefined) {
      writer.uint32(82).string(message.firstNameEn);
    }
    if (message.familyNameTh !== undefined) {
      writer.uint32(90).string(message.familyNameTh);
    }
    if (message.familyNameEn !== undefined) {
      writer.uint32(98).string(message.familyNameEn);
    }
    if (message.middleNameTh !== undefined) {
      writer.uint32(106).string(message.middleNameTh);
    }
    if (message.middleNameEn !== undefined) {
      writer.uint32(114).string(message.middleNameEn);
    }
    if (message.nicknameTh !== undefined) {
      writer.uint32(122).string(message.nicknameTh);
    }
    if (message.nicknameEn !== undefined) {
      writer.uint32(130).string(message.nicknameEn);
    }
    if (message.preferredPronoun !== undefined) {
      writer.uint32(138).string(message.preferredPronoun);
    }
    if (message.nationalId !== undefined) {
      writer.uint32(146).string(message.nationalId);
    }
    if (message.nationality !== undefined) {
      Country.encode(message.nationality, writer.uint32(154).fork()).join();
    }
    if (message.birthDate !== undefined) {
      Timestamp.encode(
        toTimestamp(message.birthDate),
        writer.uint32(162).fork(),
      ).join();
    }
    if (message.religion !== undefined) {
      Religion.encode(message.religion, writer.uint32(170).fork()).join();
    }
    if (message.bloodType !== undefined) {
      writer.uint32(178).string(message.bloodType);
    }
    if (message.foodLimitations !== undefined) {
      writer.uint32(186).string(message.foodLimitations);
    }
    if (message.drugAllergies !== undefined) {
      writer.uint32(194).string(message.drugAllergies);
    }
    if (message.medicalConditions !== undefined) {
      writer.uint32(202).string(message.medicalConditions);
    }
    if (message.medications !== undefined) {
      writer.uint32(210).string(message.medications);
    }
    if (message.shirtSize !== undefined) {
      writer.uint32(216).int32(message.shirtSize);
    }
    if (message.email !== undefined) {
      writer.uint32(226).string(message.email);
    }
    if (message.emailVerified !== undefined) {
      writer.uint32(232).bool(message.emailVerified);
    }
    if (message.phoneNumber !== undefined) {
      writer.uint32(242).string(message.phoneNumber);
    }
    if (message.phoneNumberVerified !== undefined) {
      writer.uint32(248).bool(message.phoneNumberVerified);
    }
    if (message.lineId !== undefined) {
      writer.uint32(258).string(message.lineId);
    }
    if (message.facebook !== undefined) {
      writer.uint32(266).string(message.facebook);
    }
    if (message.instagram !== undefined) {
      writer.uint32(274).string(message.instagram);
    }
    if (message.familyStatus !== undefined) {
      FamilyStatus.encode(
        message.familyStatus,
        writer.uint32(282).fork(),
      ).join();
    }
    if (message.parent !== undefined) {
      writer.uint32(290).string(message.parent);
    }
    if (message.siblingTotal !== undefined) {
      writer.uint32(296).int32(message.siblingTotal);
    }
    if (message.siblingOrder !== undefined) {
      writer.uint32(304).int32(message.siblingOrder);
    }
    if (message.parentPhoneNumber !== undefined) {
      writer.uint32(314).string(message.parentPhoneNumber);
    }
    if (message.parentAddress !== undefined) {
      writer.uint32(322).string(message.parentAddress);
    }
    if (message.fatherName !== undefined) {
      writer.uint32(330).string(message.fatherName);
    }
    if (message.fatherBirthYear !== undefined) {
      writer.uint32(336).int32(message.fatherBirthYear);
    }
    if (message.fatherStatus !== undefined) {
      FamilyMemberStatus.encode(
        message.fatherStatus,
        writer.uint32(346).fork(),
      ).join();
    }
    if (message.motherName !== undefined) {
      writer.uint32(354).string(message.motherName);
    }
    if (message.motherBirthYear !== undefined) {
      writer.uint32(360).int32(message.motherBirthYear);
    }
    if (message.motherStatus !== undefined) {
      FamilyMemberStatus.encode(
        message.motherStatus,
        writer.uint32(370).fork(),
      ).join();
    }
    if (message.currentAddressNumber !== undefined) {
      writer.uint32(378).string(message.currentAddressNumber);
    }
    if (message.currentAddressProvince !== undefined) {
      Province.encode(
        message.currentAddressProvince,
        writer.uint32(386).fork(),
      ).join();
    }
    if (message.currentAddressDistrict !== undefined) {
      District.encode(
        message.currentAddressDistrict,
        writer.uint32(394).fork(),
      ).join();
    }
    if (message.currentAddressLatitude !== undefined) {
      writer.uint32(405).float(message.currentAddressLatitude);
    }
    if (message.currentAddressLongitude !== undefined) {
      writer.uint32(413).float(message.currentAddressLongitude);
    }
    if (message.currentAddressOther !== undefined) {
      writer.uint32(418).string(message.currentAddressOther);
    }
    if (message.hometownAddressNumber !== undefined) {
      writer.uint32(426).string(message.hometownAddressNumber);
    }
    if (message.hometownAddressProvince !== undefined) {
      Province.encode(
        message.hometownAddressProvince,
        writer.uint32(434).fork(),
      ).join();
    }
    if (message.hometownAddressDistrict !== undefined) {
      District.encode(
        message.hometownAddressDistrict,
        writer.uint32(442).fork(),
      ).join();
    }
    if (message.hometownAddressLatitude !== undefined) {
      writer.uint32(453).float(message.hometownAddressLatitude);
    }
    if (message.hometownAddressLongitude !== undefined) {
      writer.uint32(461).float(message.hometownAddressLongitude);
    }
    if (message.hometownAddressOther !== undefined) {
      writer.uint32(466).string(message.hometownAddressOther);
    }
    if (message.cueaDataTransferAgreement !== undefined) {
      writer.uint32(472).bool(message.cueaDataTransferAgreement);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Student {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.profilePictureKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.studentId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.department = Department.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.titleTh = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.titleEn = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.firstNameTh = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.firstNameEn = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.familyNameTh = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.familyNameEn = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.middleNameTh = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.middleNameEn = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.nicknameTh = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.nicknameEn = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.preferredPronoun = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.nationalId = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.nationality = Country.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.birthDate = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.religion = Religion.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.bloodType = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.foodLimitations = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.drugAllergies = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.medicalConditions = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.medications = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.shirtSize = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.phoneNumberVerified = reader.bool();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.lineId = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.facebook = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.instagram = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.familyStatus = FamilyStatus.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.siblingTotal = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.siblingOrder = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.parentPhoneNumber = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.parentAddress = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.fatherName = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.fatherBirthYear = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.fatherStatus = FamilyMemberStatus.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.motherName = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.motherBirthYear = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.motherStatus = FamilyMemberStatus.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.currentAddressNumber = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.currentAddressProvince = Province.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.currentAddressDistrict = District.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 50: {
          if (tag !== 405) {
            break;
          }

          message.currentAddressLatitude = reader.float();
          continue;
        }
        case 51: {
          if (tag !== 413) {
            break;
          }

          message.currentAddressLongitude = reader.float();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.currentAddressOther = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.hometownAddressNumber = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.hometownAddressProvince = Province.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.hometownAddressDistrict = District.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 56: {
          if (tag !== 453) {
            break;
          }

          message.hometownAddressLatitude = reader.float();
          continue;
        }
        case 57: {
          if (tag !== 461) {
            break;
          }

          message.hometownAddressLongitude = reader.float();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.hometownAddressOther = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.cueaDataTransferAgreement = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Student {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      profilePictureKey: isSet(object.profilePictureKey)
        ? globalThis.String(object.profilePictureKey)
        : undefined,
      studentId: isSet(object.studentId)
        ? globalThis.String(object.studentId)
        : undefined,
      department: isSet(object.department)
        ? Department.fromJSON(object.department)
        : undefined,
      titleTh: isSet(object.titleTh)
        ? globalThis.String(object.titleTh)
        : undefined,
      titleEn: isSet(object.titleEn)
        ? globalThis.String(object.titleEn)
        : undefined,
      firstNameTh: isSet(object.firstNameTh)
        ? globalThis.String(object.firstNameTh)
        : undefined,
      firstNameEn: isSet(object.firstNameEn)
        ? globalThis.String(object.firstNameEn)
        : undefined,
      familyNameTh: isSet(object.familyNameTh)
        ? globalThis.String(object.familyNameTh)
        : undefined,
      familyNameEn: isSet(object.familyNameEn)
        ? globalThis.String(object.familyNameEn)
        : undefined,
      middleNameTh: isSet(object.middleNameTh)
        ? globalThis.String(object.middleNameTh)
        : undefined,
      middleNameEn: isSet(object.middleNameEn)
        ? globalThis.String(object.middleNameEn)
        : undefined,
      nicknameTh: isSet(object.nicknameTh)
        ? globalThis.String(object.nicknameTh)
        : undefined,
      nicknameEn: isSet(object.nicknameEn)
        ? globalThis.String(object.nicknameEn)
        : undefined,
      preferredPronoun: isSet(object.preferredPronoun)
        ? globalThis.String(object.preferredPronoun)
        : undefined,
      nationalId: isSet(object.nationalId)
        ? globalThis.String(object.nationalId)
        : undefined,
      nationality: isSet(object.nationality)
        ? Country.fromJSON(object.nationality)
        : undefined,
      birthDate: isSet(object.birthDate)
        ? fromJsonTimestamp(object.birthDate)
        : undefined,
      religion: isSet(object.religion)
        ? Religion.fromJSON(object.religion)
        : undefined,
      bloodType: isSet(object.bloodType)
        ? globalThis.String(object.bloodType)
        : undefined,
      foodLimitations: isSet(object.foodLimitations)
        ? globalThis.String(object.foodLimitations)
        : undefined,
      drugAllergies: isSet(object.drugAllergies)
        ? globalThis.String(object.drugAllergies)
        : undefined,
      medicalConditions: isSet(object.medicalConditions)
        ? globalThis.String(object.medicalConditions)
        : undefined,
      medications: isSet(object.medications)
        ? globalThis.String(object.medications)
        : undefined,
      shirtSize: isSet(object.shirtSize)
        ? globalThis.Number(object.shirtSize)
        : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      emailVerified: isSet(object.emailVerified)
        ? globalThis.Boolean(object.emailVerified)
        : undefined,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.String(object.phoneNumber)
        : undefined,
      phoneNumberVerified: isSet(object.phoneNumberVerified)
        ? globalThis.Boolean(object.phoneNumberVerified)
        : undefined,
      lineId: isSet(object.lineId)
        ? globalThis.String(object.lineId)
        : undefined,
      facebook: isSet(object.facebook)
        ? globalThis.String(object.facebook)
        : undefined,
      instagram: isSet(object.instagram)
        ? globalThis.String(object.instagram)
        : undefined,
      familyStatus: isSet(object.familyStatus)
        ? FamilyStatus.fromJSON(object.familyStatus)
        : undefined,
      parent: isSet(object.parent)
        ? globalThis.String(object.parent)
        : undefined,
      siblingTotal: isSet(object.siblingTotal)
        ? globalThis.Number(object.siblingTotal)
        : undefined,
      siblingOrder: isSet(object.siblingOrder)
        ? globalThis.Number(object.siblingOrder)
        : undefined,
      parentPhoneNumber: isSet(object.parentPhoneNumber)
        ? globalThis.String(object.parentPhoneNumber)
        : undefined,
      parentAddress: isSet(object.parentAddress)
        ? globalThis.String(object.parentAddress)
        : undefined,
      fatherName: isSet(object.fatherName)
        ? globalThis.String(object.fatherName)
        : undefined,
      fatherBirthYear: isSet(object.fatherBirthYear)
        ? globalThis.Number(object.fatherBirthYear)
        : undefined,
      fatherStatus: isSet(object.fatherStatus)
        ? FamilyMemberStatus.fromJSON(object.fatherStatus)
        : undefined,
      motherName: isSet(object.motherName)
        ? globalThis.String(object.motherName)
        : undefined,
      motherBirthYear: isSet(object.motherBirthYear)
        ? globalThis.Number(object.motherBirthYear)
        : undefined,
      motherStatus: isSet(object.motherStatus)
        ? FamilyMemberStatus.fromJSON(object.motherStatus)
        : undefined,
      currentAddressNumber: isSet(object.currentAddressNumber)
        ? globalThis.String(object.currentAddressNumber)
        : undefined,
      currentAddressProvince: isSet(object.currentAddressProvince)
        ? Province.fromJSON(object.currentAddressProvince)
        : undefined,
      currentAddressDistrict: isSet(object.currentAddressDistrict)
        ? District.fromJSON(object.currentAddressDistrict)
        : undefined,
      currentAddressLatitude: isSet(object.currentAddressLatitude)
        ? globalThis.Number(object.currentAddressLatitude)
        : undefined,
      currentAddressLongitude: isSet(object.currentAddressLongitude)
        ? globalThis.Number(object.currentAddressLongitude)
        : undefined,
      currentAddressOther: isSet(object.currentAddressOther)
        ? globalThis.String(object.currentAddressOther)
        : undefined,
      hometownAddressNumber: isSet(object.hometownAddressNumber)
        ? globalThis.String(object.hometownAddressNumber)
        : undefined,
      hometownAddressProvince: isSet(object.hometownAddressProvince)
        ? Province.fromJSON(object.hometownAddressProvince)
        : undefined,
      hometownAddressDistrict: isSet(object.hometownAddressDistrict)
        ? District.fromJSON(object.hometownAddressDistrict)
        : undefined,
      hometownAddressLatitude: isSet(object.hometownAddressLatitude)
        ? globalThis.Number(object.hometownAddressLatitude)
        : undefined,
      hometownAddressLongitude: isSet(object.hometownAddressLongitude)
        ? globalThis.Number(object.hometownAddressLongitude)
        : undefined,
      hometownAddressOther: isSet(object.hometownAddressOther)
        ? globalThis.String(object.hometownAddressOther)
        : undefined,
      cueaDataTransferAgreement: isSet(object.cueaDataTransferAgreement)
        ? globalThis.Boolean(object.cueaDataTransferAgreement)
        : undefined,
    };
  },

  toJSON(message: Student): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.profilePictureKey !== undefined) {
      obj.profilePictureKey = message.profilePictureKey;
    }
    if (message.studentId !== undefined) {
      obj.studentId = message.studentId;
    }
    if (message.department !== undefined) {
      obj.department = Department.toJSON(message.department);
    }
    if (message.titleTh !== undefined) {
      obj.titleTh = message.titleTh;
    }
    if (message.titleEn !== undefined) {
      obj.titleEn = message.titleEn;
    }
    if (message.firstNameTh !== undefined) {
      obj.firstNameTh = message.firstNameTh;
    }
    if (message.firstNameEn !== undefined) {
      obj.firstNameEn = message.firstNameEn;
    }
    if (message.familyNameTh !== undefined) {
      obj.familyNameTh = message.familyNameTh;
    }
    if (message.familyNameEn !== undefined) {
      obj.familyNameEn = message.familyNameEn;
    }
    if (message.middleNameTh !== undefined) {
      obj.middleNameTh = message.middleNameTh;
    }
    if (message.middleNameEn !== undefined) {
      obj.middleNameEn = message.middleNameEn;
    }
    if (message.nicknameTh !== undefined) {
      obj.nicknameTh = message.nicknameTh;
    }
    if (message.nicknameEn !== undefined) {
      obj.nicknameEn = message.nicknameEn;
    }
    if (message.preferredPronoun !== undefined) {
      obj.preferredPronoun = message.preferredPronoun;
    }
    if (message.nationalId !== undefined) {
      obj.nationalId = message.nationalId;
    }
    if (message.nationality !== undefined) {
      obj.nationality = Country.toJSON(message.nationality);
    }
    if (message.birthDate !== undefined) {
      obj.birthDate = message.birthDate.toISOString();
    }
    if (message.religion !== undefined) {
      obj.religion = Religion.toJSON(message.religion);
    }
    if (message.bloodType !== undefined) {
      obj.bloodType = message.bloodType;
    }
    if (message.foodLimitations !== undefined) {
      obj.foodLimitations = message.foodLimitations;
    }
    if (message.drugAllergies !== undefined) {
      obj.drugAllergies = message.drugAllergies;
    }
    if (message.medicalConditions !== undefined) {
      obj.medicalConditions = message.medicalConditions;
    }
    if (message.medications !== undefined) {
      obj.medications = message.medications;
    }
    if (message.shirtSize !== undefined) {
      obj.shirtSize = Math.round(message.shirtSize);
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.emailVerified !== undefined) {
      obj.emailVerified = message.emailVerified;
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.phoneNumberVerified !== undefined) {
      obj.phoneNumberVerified = message.phoneNumberVerified;
    }
    if (message.lineId !== undefined) {
      obj.lineId = message.lineId;
    }
    if (message.facebook !== undefined) {
      obj.facebook = message.facebook;
    }
    if (message.instagram !== undefined) {
      obj.instagram = message.instagram;
    }
    if (message.familyStatus !== undefined) {
      obj.familyStatus = FamilyStatus.toJSON(message.familyStatus);
    }
    if (message.parent !== undefined) {
      obj.parent = message.parent;
    }
    if (message.siblingTotal !== undefined) {
      obj.siblingTotal = Math.round(message.siblingTotal);
    }
    if (message.siblingOrder !== undefined) {
      obj.siblingOrder = Math.round(message.siblingOrder);
    }
    if (message.parentPhoneNumber !== undefined) {
      obj.parentPhoneNumber = message.parentPhoneNumber;
    }
    if (message.parentAddress !== undefined) {
      obj.parentAddress = message.parentAddress;
    }
    if (message.fatherName !== undefined) {
      obj.fatherName = message.fatherName;
    }
    if (message.fatherBirthYear !== undefined) {
      obj.fatherBirthYear = Math.round(message.fatherBirthYear);
    }
    if (message.fatherStatus !== undefined) {
      obj.fatherStatus = FamilyMemberStatus.toJSON(message.fatherStatus);
    }
    if (message.motherName !== undefined) {
      obj.motherName = message.motherName;
    }
    if (message.motherBirthYear !== undefined) {
      obj.motherBirthYear = Math.round(message.motherBirthYear);
    }
    if (message.motherStatus !== undefined) {
      obj.motherStatus = FamilyMemberStatus.toJSON(message.motherStatus);
    }
    if (message.currentAddressNumber !== undefined) {
      obj.currentAddressNumber = message.currentAddressNumber;
    }
    if (message.currentAddressProvince !== undefined) {
      obj.currentAddressProvince = Province.toJSON(
        message.currentAddressProvince,
      );
    }
    if (message.currentAddressDistrict !== undefined) {
      obj.currentAddressDistrict = District.toJSON(
        message.currentAddressDistrict,
      );
    }
    if (message.currentAddressLatitude !== undefined) {
      obj.currentAddressLatitude = message.currentAddressLatitude;
    }
    if (message.currentAddressLongitude !== undefined) {
      obj.currentAddressLongitude = message.currentAddressLongitude;
    }
    if (message.currentAddressOther !== undefined) {
      obj.currentAddressOther = message.currentAddressOther;
    }
    if (message.hometownAddressNumber !== undefined) {
      obj.hometownAddressNumber = message.hometownAddressNumber;
    }
    if (message.hometownAddressProvince !== undefined) {
      obj.hometownAddressProvince = Province.toJSON(
        message.hometownAddressProvince,
      );
    }
    if (message.hometownAddressDistrict !== undefined) {
      obj.hometownAddressDistrict = District.toJSON(
        message.hometownAddressDistrict,
      );
    }
    if (message.hometownAddressLatitude !== undefined) {
      obj.hometownAddressLatitude = message.hometownAddressLatitude;
    }
    if (message.hometownAddressLongitude !== undefined) {
      obj.hometownAddressLongitude = message.hometownAddressLongitude;
    }
    if (message.hometownAddressOther !== undefined) {
      obj.hometownAddressOther = message.hometownAddressOther;
    }
    if (message.cueaDataTransferAgreement !== undefined) {
      obj.cueaDataTransferAgreement = message.cueaDataTransferAgreement;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Student>, I>>(base?: I): Student {
    return Student.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Student>, I>>(object: I): Student {
    const message = createBaseStudent();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.profilePictureKey = object.profilePictureKey ?? undefined;
    message.studentId = object.studentId ?? undefined;
    message.department =
      object.department !== undefined && object.department !== null
        ? Department.fromPartial(object.department)
        : undefined;
    message.titleTh = object.titleTh ?? undefined;
    message.titleEn = object.titleEn ?? undefined;
    message.firstNameTh = object.firstNameTh ?? undefined;
    message.firstNameEn = object.firstNameEn ?? undefined;
    message.familyNameTh = object.familyNameTh ?? undefined;
    message.familyNameEn = object.familyNameEn ?? undefined;
    message.middleNameTh = object.middleNameTh ?? undefined;
    message.middleNameEn = object.middleNameEn ?? undefined;
    message.nicknameTh = object.nicknameTh ?? undefined;
    message.nicknameEn = object.nicknameEn ?? undefined;
    message.preferredPronoun = object.preferredPronoun ?? undefined;
    message.nationalId = object.nationalId ?? undefined;
    message.nationality =
      object.nationality !== undefined && object.nationality !== null
        ? Country.fromPartial(object.nationality)
        : undefined;
    message.birthDate = object.birthDate ?? undefined;
    message.religion =
      object.religion !== undefined && object.religion !== null
        ? Religion.fromPartial(object.religion)
        : undefined;
    message.bloodType = object.bloodType ?? undefined;
    message.foodLimitations = object.foodLimitations ?? undefined;
    message.drugAllergies = object.drugAllergies ?? undefined;
    message.medicalConditions = object.medicalConditions ?? undefined;
    message.medications = object.medications ?? undefined;
    message.shirtSize = object.shirtSize ?? undefined;
    message.email = object.email ?? undefined;
    message.emailVerified = object.emailVerified ?? undefined;
    message.phoneNumber = object.phoneNumber ?? undefined;
    message.phoneNumberVerified = object.phoneNumberVerified ?? undefined;
    message.lineId = object.lineId ?? undefined;
    message.facebook = object.facebook ?? undefined;
    message.instagram = object.instagram ?? undefined;
    message.familyStatus =
      object.familyStatus !== undefined && object.familyStatus !== null
        ? FamilyStatus.fromPartial(object.familyStatus)
        : undefined;
    message.parent = object.parent ?? undefined;
    message.siblingTotal = object.siblingTotal ?? undefined;
    message.siblingOrder = object.siblingOrder ?? undefined;
    message.parentPhoneNumber = object.parentPhoneNumber ?? undefined;
    message.parentAddress = object.parentAddress ?? undefined;
    message.fatherName = object.fatherName ?? undefined;
    message.fatherBirthYear = object.fatherBirthYear ?? undefined;
    message.fatherStatus =
      object.fatherStatus !== undefined && object.fatherStatus !== null
        ? FamilyMemberStatus.fromPartial(object.fatherStatus)
        : undefined;
    message.motherName = object.motherName ?? undefined;
    message.motherBirthYear = object.motherBirthYear ?? undefined;
    message.motherStatus =
      object.motherStatus !== undefined && object.motherStatus !== null
        ? FamilyMemberStatus.fromPartial(object.motherStatus)
        : undefined;
    message.currentAddressNumber = object.currentAddressNumber ?? undefined;
    message.currentAddressProvince =
      object.currentAddressProvince !== undefined &&
      object.currentAddressProvince !== null
        ? Province.fromPartial(object.currentAddressProvince)
        : undefined;
    message.currentAddressDistrict =
      object.currentAddressDistrict !== undefined &&
      object.currentAddressDistrict !== null
        ? District.fromPartial(object.currentAddressDistrict)
        : undefined;
    message.currentAddressLatitude = object.currentAddressLatitude ?? undefined;
    message.currentAddressLongitude =
      object.currentAddressLongitude ?? undefined;
    message.currentAddressOther = object.currentAddressOther ?? undefined;
    message.hometownAddressNumber = object.hometownAddressNumber ?? undefined;
    message.hometownAddressProvince =
      object.hometownAddressProvince !== undefined &&
      object.hometownAddressProvince !== null
        ? Province.fromPartial(object.hometownAddressProvince)
        : undefined;
    message.hometownAddressDistrict =
      object.hometownAddressDistrict !== undefined &&
      object.hometownAddressDistrict !== null
        ? District.fromPartial(object.hometownAddressDistrict)
        : undefined;
    message.hometownAddressLatitude =
      object.hometownAddressLatitude ?? undefined;
    message.hometownAddressLongitude =
      object.hometownAddressLongitude ?? undefined;
    message.hometownAddressOther = object.hometownAddressOther ?? undefined;
    message.cueaDataTransferAgreement =
      object.cueaDataTransferAgreement ?? undefined;
    return message;
  },
};

function createBaseDepartment(): Department {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    nameTh: undefined,
    nameEn: undefined,
    code: undefined,
  };
}

export const Department: MessageFns<Department> = {
  encode(
    message: Department,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.nameTh !== undefined) {
      writer.uint32(34).string(message.nameTh);
    }
    if (message.nameEn !== undefined) {
      writer.uint32(42).string(message.nameEn);
    }
    if (message.code !== undefined) {
      writer.uint32(50).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Department {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepartment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nameTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nameEn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Department {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      nameTh: isSet(object.nameTh)
        ? globalThis.String(object.nameTh)
        : undefined,
      nameEn: isSet(object.nameEn)
        ? globalThis.String(object.nameEn)
        : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
    };
  },

  toJSON(message: Department): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.nameTh !== undefined) {
      obj.nameTh = message.nameTh;
    }
    if (message.nameEn !== undefined) {
      obj.nameEn = message.nameEn;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Department>, I>>(base?: I): Department {
    return Department.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Department>, I>>(
    object: I,
  ): Department {
    const message = createBaseDepartment();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.nameTh = object.nameTh ?? undefined;
    message.nameEn = object.nameEn ?? undefined;
    message.code = object.code ?? undefined;
    return message;
  },
};

function createBaseCountry(): Country {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    name: undefined,
    code: undefined,
  };
}

export const Country: MessageFns<Country> = {
  encode(
    message: Country,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.name !== undefined) {
      writer.uint32(42).string(message.name);
    }
    if (message.code !== undefined) {
      writer.uint32(50).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Country {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Country {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : undefined,
    };
  },

  toJSON(message: Country): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.code !== undefined) {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Country>, I>>(base?: I): Country {
    return Country.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Country>, I>>(object: I): Country {
    const message = createBaseCountry();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.name = object.name ?? undefined;
    message.code = object.code ?? undefined;
    return message;
  },
};

function createBaseReligion(): Religion {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    nameTh: undefined,
    nameEn: undefined,
  };
}

export const Religion: MessageFns<Religion> = {
  encode(
    message: Religion,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.nameTh !== undefined) {
      writer.uint32(34).string(message.nameTh);
    }
    if (message.nameEn !== undefined) {
      writer.uint32(42).string(message.nameEn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Religion {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReligion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nameTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nameEn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Religion {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      nameTh: isSet(object.nameTh)
        ? globalThis.String(object.nameTh)
        : undefined,
      nameEn: isSet(object.nameEn)
        ? globalThis.String(object.nameEn)
        : undefined,
    };
  },

  toJSON(message: Religion): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.nameTh !== undefined) {
      obj.nameTh = message.nameTh;
    }
    if (message.nameEn !== undefined) {
      obj.nameEn = message.nameEn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Religion>, I>>(base?: I): Religion {
    return Religion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Religion>, I>>(object: I): Religion {
    const message = createBaseReligion();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.nameTh = object.nameTh ?? undefined;
    message.nameEn = object.nameEn ?? undefined;
    return message;
  },
};

function createBaseFamilyStatus(): FamilyStatus {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    valueTh: undefined,
    valueEn: undefined,
  };
}

export const FamilyStatus: MessageFns<FamilyStatus> = {
  encode(
    message: FamilyStatus,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.valueTh !== undefined) {
      writer.uint32(34).string(message.valueTh);
    }
    if (message.valueEn !== undefined) {
      writer.uint32(42).string(message.valueEn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FamilyStatus {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.valueTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.valueEn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamilyStatus {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      valueTh: isSet(object.valueTh)
        ? globalThis.String(object.valueTh)
        : undefined,
      valueEn: isSet(object.valueEn)
        ? globalThis.String(object.valueEn)
        : undefined,
    };
  },

  toJSON(message: FamilyStatus): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.valueTh !== undefined) {
      obj.valueTh = message.valueTh;
    }
    if (message.valueEn !== undefined) {
      obj.valueEn = message.valueEn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamilyStatus>, I>>(
    base?: I,
  ): FamilyStatus {
    return FamilyStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyStatus>, I>>(
    object: I,
  ): FamilyStatus {
    const message = createBaseFamilyStatus();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.valueTh = object.valueTh ?? undefined;
    message.valueEn = object.valueEn ?? undefined;
    return message;
  },
};

function createBaseFamilyMemberStatus(): FamilyMemberStatus {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    valueTh: undefined,
    valueEn: undefined,
  };
}

export const FamilyMemberStatus: MessageFns<FamilyMemberStatus> = {
  encode(
    message: FamilyMemberStatus,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.valueTh !== undefined) {
      writer.uint32(34).string(message.valueTh);
    }
    if (message.valueEn !== undefined) {
      writer.uint32(42).string(message.valueEn);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FamilyMemberStatus {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFamilyMemberStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.valueTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.valueEn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FamilyMemberStatus {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      valueTh: isSet(object.valueTh)
        ? globalThis.String(object.valueTh)
        : undefined,
      valueEn: isSet(object.valueEn)
        ? globalThis.String(object.valueEn)
        : undefined,
    };
  },

  toJSON(message: FamilyMemberStatus): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.valueTh !== undefined) {
      obj.valueTh = message.valueTh;
    }
    if (message.valueEn !== undefined) {
      obj.valueEn = message.valueEn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FamilyMemberStatus>, I>>(
    base?: I,
  ): FamilyMemberStatus {
    return FamilyMemberStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FamilyMemberStatus>, I>>(
    object: I,
  ): FamilyMemberStatus {
    const message = createBaseFamilyMemberStatus();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.valueTh = object.valueTh ?? undefined;
    message.valueEn = object.valueEn ?? undefined;
    return message;
  },
};

function createBaseProvince(): Province {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    nameTh: undefined,
    nameEn: undefined,
    provinceCode: undefined,
  };
}

export const Province: MessageFns<Province> = {
  encode(
    message: Province,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.nameTh !== undefined) {
      writer.uint32(34).string(message.nameTh);
    }
    if (message.nameEn !== undefined) {
      writer.uint32(42).string(message.nameEn);
    }
    if (message.provinceCode !== undefined) {
      writer.uint32(48).int32(message.provinceCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Province {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvince();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nameTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nameEn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.provinceCode = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Province {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      nameTh: isSet(object.nameTh)
        ? globalThis.String(object.nameTh)
        : undefined,
      nameEn: isSet(object.nameEn)
        ? globalThis.String(object.nameEn)
        : undefined,
      provinceCode: isSet(object.provinceCode)
        ? globalThis.Number(object.provinceCode)
        : undefined,
    };
  },

  toJSON(message: Province): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.nameTh !== undefined) {
      obj.nameTh = message.nameTh;
    }
    if (message.nameEn !== undefined) {
      obj.nameEn = message.nameEn;
    }
    if (message.provinceCode !== undefined) {
      obj.provinceCode = Math.round(message.provinceCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Province>, I>>(base?: I): Province {
    return Province.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Province>, I>>(object: I): Province {
    const message = createBaseProvince();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.nameTh = object.nameTh ?? undefined;
    message.nameEn = object.nameEn ?? undefined;
    message.provinceCode = object.provinceCode ?? undefined;
    return message;
  },
};

function createBaseDistrict(): District {
  return {
    id: 0,
    createdAt: undefined,
    updatedAt: undefined,
    nameTh: undefined,
    nameEn: undefined,
    provinceCode: undefined,
    districtCode: undefined,
    postalCode: undefined,
  };
}

export const District: MessageFns<District> = {
  encode(
    message: District,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.createdAt),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(
        toTimestamp(message.updatedAt),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.nameTh !== undefined) {
      writer.uint32(34).string(message.nameTh);
    }
    if (message.nameEn !== undefined) {
      writer.uint32(42).string(message.nameEn);
    }
    if (message.provinceCode !== undefined) {
      writer.uint32(48).int32(message.provinceCode);
    }
    if (message.districtCode !== undefined) {
      writer.uint32(56).int32(message.districtCode);
    }
    if (message.postalCode !== undefined) {
      writer.uint32(64).int32(message.postalCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): District {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistrict();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nameTh = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nameEn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.provinceCode = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.districtCode = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.postalCode = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): District {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      createdAt: isSet(object.createdAt)
        ? fromJsonTimestamp(object.createdAt)
        : undefined,
      updatedAt: isSet(object.updatedAt)
        ? fromJsonTimestamp(object.updatedAt)
        : undefined,
      nameTh: isSet(object.nameTh)
        ? globalThis.String(object.nameTh)
        : undefined,
      nameEn: isSet(object.nameEn)
        ? globalThis.String(object.nameEn)
        : undefined,
      provinceCode: isSet(object.provinceCode)
        ? globalThis.Number(object.provinceCode)
        : undefined,
      districtCode: isSet(object.districtCode)
        ? globalThis.Number(object.districtCode)
        : undefined,
      postalCode: isSet(object.postalCode)
        ? globalThis.Number(object.postalCode)
        : undefined,
    };
  },

  toJSON(message: District): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.nameTh !== undefined) {
      obj.nameTh = message.nameTh;
    }
    if (message.nameEn !== undefined) {
      obj.nameEn = message.nameEn;
    }
    if (message.provinceCode !== undefined) {
      obj.provinceCode = Math.round(message.provinceCode);
    }
    if (message.districtCode !== undefined) {
      obj.districtCode = Math.round(message.districtCode);
    }
    if (message.postalCode !== undefined) {
      obj.postalCode = Math.round(message.postalCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<District>, I>>(base?: I): District {
    return District.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<District>, I>>(object: I): District {
    const message = createBaseDistrict();
    message.id = object.id ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.nameTh = object.nameTh ?? undefined;
    message.nameEn = object.nameEn ?? undefined;
    message.provinceCode = object.provinceCode ?? undefined;
    message.districtCode = object.districtCode ?? undefined;
    message.postalCode = object.postalCode ?? undefined;
    return message;
  },
};

export type StudentServiceService = typeof StudentServiceService;
export const StudentServiceService = {
  getStudentById: {
    path: '/intania.auth.student.v1.StudentService/GetStudentById',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetStudentByIdRequest) =>
      Buffer.from(GetStudentByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetStudentByIdRequest.decode(value),
    responseSerialize: (value: GetStudentByIdResponse) =>
      Buffer.from(GetStudentByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetStudentByIdResponse.decode(value),
  },
  getStudentByStudentId: {
    path: '/intania.auth.student.v1.StudentService/GetStudentByStudentId',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetStudentByStudentIdRequest) =>
      Buffer.from(GetStudentByStudentIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetStudentByStudentIdRequest.decode(value),
    responseSerialize: (value: GetStudentByStudentIdResponse) =>
      Buffer.from(GetStudentByStudentIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetStudentByStudentIdResponse.decode(value),
  },
  /**
   * Edit student information.
   *
   * The system look for `student.id` for target student to edit.
   *
   * The caller must specified `masks` for all the attribute which will be edited. If the
   * masks is specified but the field the cleared/unset, that field will be removed
   * if NULLABLE else will be set to default.
   * For information about field mask, see https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask.
   * If there is/are unexpected field(s), it will be ignored.
   *
   * For every attribute
   *   if the attribute is primitive and not in the exception, it can be directly edited.
   *   if the attribute is relate to other entity (`FamilyStatus`, `FamilyMemberStatus`,
   *     `Religion`, `Province`, `District`), specify id of the inner message field to edit.
   *     Note that other field in the inner entity is ignore.
   *
   * These are the exception.
   *   1. `student.id`, `student.created_at`, `student.updated_at`, `student.student_id` can't be edited.
   *   2. `student.id` does not need to be specified in `masks`.
   *
   * The example are shown as JSON for readability.
   *
   * Example 1: Set and unset
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.title_en", "student.first_name_en", "extra_field"]
   *
   *     "student": {
   *       "id": 5,
   *       "title_en": "Mr.",
   *       "family_name_en": "Doe"
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save "Mr." as `title_en` for student with id = 5.
   *   2. Clear field `first_name_en` for student with id = 5 because it is not set.
   *   3. Ignore `family_name_en` because it is not specified in the masks.
   *   4. Ignore `extra_field` because it is not valid path.
   *
   * Example 2: Relationship
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.department.id"]
   *
   *     "student": {
   *       "id": 5
   *       "department": {
   *         "id": 4,
   *         "name_en": "Industrial Engineering"
   *       },
   *       "religion": {
   *         "id": 4
   *       },
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save `department.id`=4 (internally stored as department_id) for student with id=5.
   *   2. Ignore `department.name_en`.
   *   3. Ignore `religion` because it's not specified in masks.
   */
  editStudent: {
    path: '/intania.auth.student.v1.StudentService/EditStudent',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EditStudentRequest) =>
      Buffer.from(EditStudentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EditStudentRequest.decode(value),
    responseSerialize: (value: EditStudentResponse) =>
      Buffer.from(EditStudentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EditStudentResponse.decode(value),
  },
  /**
   * Get map data
   * Use to get data available about normalized type such as religion.
   */
  listStudentMapping: {
    path: '/intania.auth.student.v1.StudentService/ListStudentMapping',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListStudentMappingRequest) =>
      Buffer.from(ListStudentMappingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      ListStudentMappingRequest.decode(value),
    responseSerialize: (value: ListStudentMappingResponse) =>
      Buffer.from(ListStudentMappingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      ListStudentMappingResponse.decode(value),
  },
} as const;

export interface StudentServiceServer extends UntypedServiceImplementation {
  getStudentById: handleUnaryCall<
    GetStudentByIdRequest,
    GetStudentByIdResponse
  >;
  getStudentByStudentId: handleUnaryCall<
    GetStudentByStudentIdRequest,
    GetStudentByStudentIdResponse
  >;
  /**
   * Edit student information.
   *
   * The system look for `student.id` for target student to edit.
   *
   * The caller must specified `masks` for all the attribute which will be edited. If the
   * masks is specified but the field the cleared/unset, that field will be removed
   * if NULLABLE else will be set to default.
   * For information about field mask, see https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask.
   * If there is/are unexpected field(s), it will be ignored.
   *
   * For every attribute
   *   if the attribute is primitive and not in the exception, it can be directly edited.
   *   if the attribute is relate to other entity (`FamilyStatus`, `FamilyMemberStatus`,
   *     `Religion`, `Province`, `District`), specify id of the inner message field to edit.
   *     Note that other field in the inner entity is ignore.
   *
   * These are the exception.
   *   1. `student.id`, `student.created_at`, `student.updated_at`, `student.student_id` can't be edited.
   *   2. `student.id` does not need to be specified in `masks`.
   *
   * The example are shown as JSON for readability.
   *
   * Example 1: Set and unset
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.title_en", "student.first_name_en", "extra_field"]
   *
   *     "student": {
   *       "id": 5,
   *       "title_en": "Mr.",
   *       "family_name_en": "Doe"
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save "Mr." as `title_en` for student with id = 5.
   *   2. Clear field `first_name_en` for student with id = 5 because it is not set.
   *   3. Ignore `family_name_en` because it is not specified in the masks.
   *   4. Ignore `extra_field` because it is not valid path.
   *
   * Example 2: Relationship
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.department.id"]
   *
   *     "student": {
   *       "id": 5
   *       "department": {
   *         "id": 4,
   *         "name_en": "Industrial Engineering"
   *       },
   *       "religion": {
   *         "id": 4
   *       },
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save `department.id`=4 (internally stored as department_id) for student with id=5.
   *   2. Ignore `department.name_en`.
   *   3. Ignore `religion` because it's not specified in masks.
   */
  editStudent: handleUnaryCall<EditStudentRequest, EditStudentResponse>;
  /**
   * Get map data
   * Use to get data available about normalized type such as religion.
   */
  listStudentMapping: handleUnaryCall<
    ListStudentMappingRequest,
    ListStudentMappingResponse
  >;
}

export interface StudentServiceClient extends Client {
  getStudentById(
    request: GetStudentByIdRequest,
    callback: (
      error: ServiceError | null,
      response: GetStudentByIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getStudentById(
    request: GetStudentByIdRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetStudentByIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getStudentById(
    request: GetStudentByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetStudentByIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getStudentByStudentId(
    request: GetStudentByStudentIdRequest,
    callback: (
      error: ServiceError | null,
      response: GetStudentByStudentIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getStudentByStudentId(
    request: GetStudentByStudentIdRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetStudentByStudentIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getStudentByStudentId(
    request: GetStudentByStudentIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetStudentByStudentIdResponse,
    ) => void,
  ): ClientUnaryCall;
  /**
   * Edit student information.
   *
   * The system look for `student.id` for target student to edit.
   *
   * The caller must specified `masks` for all the attribute which will be edited. If the
   * masks is specified but the field the cleared/unset, that field will be removed
   * if NULLABLE else will be set to default.
   * For information about field mask, see https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask.
   * If there is/are unexpected field(s), it will be ignored.
   *
   * For every attribute
   *   if the attribute is primitive and not in the exception, it can be directly edited.
   *   if the attribute is relate to other entity (`FamilyStatus`, `FamilyMemberStatus`,
   *     `Religion`, `Province`, `District`), specify id of the inner message field to edit.
   *     Note that other field in the inner entity is ignore.
   *
   * These are the exception.
   *   1. `student.id`, `student.created_at`, `student.updated_at`, `student.student_id` can't be edited.
   *   2. `student.id` does not need to be specified in `masks`.
   *
   * The example are shown as JSON for readability.
   *
   * Example 1: Set and unset
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.title_en", "student.first_name_en", "extra_field"]
   *
   *     "student": {
   *       "id": 5,
   *       "title_en": "Mr.",
   *       "family_name_en": "Doe"
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save "Mr." as `title_en` for student with id = 5.
   *   2. Clear field `first_name_en` for student with id = 5 because it is not set.
   *   3. Ignore `family_name_en` because it is not specified in the masks.
   *   4. Ignore `extra_field` because it is not valid path.
   *
   * Example 2: Relationship
   *   {
   *     "sid": "<REDACTED>",
   *     "masks": {
   *       "paths": ["student.department.id"]
   *
   *     "student": {
   *       "id": 5
   *       "department": {
   *         "id": 4,
   *         "name_en": "Industrial Engineering"
   *       },
   *       "religion": {
   *         "id": 4
   *       },
   *     }
   *   }
   *
   * In this example, if this sid belong to the student, the system will
   *   1. Save `department.id`=4 (internally stored as department_id) for student with id=5.
   *   2. Ignore `department.name_en`.
   *   3. Ignore `religion` because it's not specified in masks.
   */
  editStudent(
    request: EditStudentRequest,
    callback: (
      error: ServiceError | null,
      response: EditStudentResponse,
    ) => void,
  ): ClientUnaryCall;
  editStudent(
    request: EditStudentRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: EditStudentResponse,
    ) => void,
  ): ClientUnaryCall;
  editStudent(
    request: EditStudentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: EditStudentResponse,
    ) => void,
  ): ClientUnaryCall;
  /**
   * Get map data
   * Use to get data available about normalized type such as religion.
   */
  listStudentMapping(
    request: ListStudentMappingRequest,
    callback: (
      error: ServiceError | null,
      response: ListStudentMappingResponse,
    ) => void,
  ): ClientUnaryCall;
  listStudentMapping(
    request: ListStudentMappingRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ListStudentMappingResponse,
    ) => void,
  ): ClientUnaryCall;
  listStudentMapping(
    request: ListStudentMappingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ListStudentMappingResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const StudentServiceClient = makeGenericClientConstructor(
  StudentServiceService,
  'intania.auth.student.v1.StudentService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): StudentServiceClient;
  service: typeof StudentServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === 'string') {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
